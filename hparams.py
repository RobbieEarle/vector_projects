import numpy as np
import util


_BOUNDS10 = {
    'mlp': {
        'cifar100': {
            'max': {
                'beta1': [-0.812, -0.826, -0.68, -0.669, -0.772, -0.674, -0.897, -0.813, -0.738, -0.873],
                'beta2': [-3.548, -3.565, -3.617, -3.694, -3.569, -3.397, -3.552, -3.767, -3.583, -3.461],
                'eps': [-8.644, -8.78, -9.462, -10.372, -10.182, -9.548, -9.988, -10.388, -9.517, -8.968],
                'wd': [-6.269, -6.22, -5.071, -5.438, -5.611, -4.939, -5.39, -5.536, -5.152, -5.832],
                'max_lr': [-2.29, -2.29, -2.294, -2.328, -2.291, -2.401, -2.313, -2.475, -2.298, -2.417],
                'cycle_peak': [0.413, 0.409, 0.412, 0.396, 0.36, 0.351, 0.396, 0.42, 0.407, 0.407],
            },
            'relu': {
                'beta1': [-0.633, -0.592, -0.593, -0.672, -0.639, -0.86, -0.689, -0.793, -1.196, -0.747],
                'beta2': [-3.468, -3.825, -3.637, -3.025, -4.195, -4.073, -4.537, -3.162, -2.594, -3.18],
                'eps': [-8.223, -8.085, -8.287, -6.916, -7.136, -7.153, -7.088, -8.064, -8.026, -6.956],
                'wd': [-6.02, -6.142, -6.013, -6.333, -5.991, -6.321, -6.233, -6.009, -6.2, -6.094],
                'max_lr': [-2.102, -2.131, -2.125, -2.247, -2.023, -2.021, -2.285, -2.172, -2.23, -2.127],
                'cycle_peak': [0.392, 0.373, 0.399, 0.392, 0.35, 0.36, 0.329, 0.366, 0.234, 0.366],
            },
        }
    },
    'cnn': {
        'cifar100': {
            'max': {
                'beta1': [-0.527, -0.47, -0.531, -0.519, -0.651, -0.527, -0.518, -0.585, -0.56, -0.636],
                'beta2': [-2.788, -2.824, -2.88, -2.915, -2.646, -2.851, -2.795, -2.794, -2.911, -2.643],
                'eps': [-7.535, -8.031, -7.955, -7.804, -7.619, -7.916, -8.045, -7.937, -7.695, -7.441],
                'wd': [-3.784, -3.482, -3.506, -3.542, -3.753, -3.734, -3.778, -3.605, -3.796, -3.721],
                'max_lr': [-2.534, -2.575, -2.556, -2.589, -2.584, -2.54, -2.549, -2.611, -2.549, -2.571],
                'cycle_peak': [0.438, 0.444, 0.442, 0.456, 0.432, 0.434, 0.45, 0.456, 0.447, 0.437],
            },
            'relu': {
                'beta1': [-0.445, -0.39, -0.511, -0.429, -0.51, -0.564, -0.378, -0.54, -0.605, -0.417],
                'beta2': [-2.333, -2.353, -2.332, -2.591, -2.906, -2.362, -2.567, -2.997, -3.233, -2.905],
                'eps': [-7.2, -7.115, -7.212, -6.403, -6.461, -7.548, -7.593, -6.384, -7.2, -7.762],
                'wd': [-3.964, -3.996, -3.775, -4.287, -3.702, -3.886, -3.69, -3.693, -3.615, -3.865],
                'max_lr': [-2.909, -2.961, -2.875, -2.884, -2.856, -2.959, -2.862, -2.932, -2.908, -2.734],
                'cycle_peak': [0.467, 0.472, 0.452, 0.465, 0.463, 0.475, 0.475, 0.453, 0.439, 0.461],
            },
        }
    }
}

_BOUNDS50 = {
    'mlp': {
        'cifar100': {
            'max': {
                'beta1': [-0.953, -1.14, -0.792, -0.979, -1.111, -0.856, -1.096, -1.101, -0.954, -1.108],
                'beta2': [-3.41, -3.807, -3.824, -3.521, -3.423, -2.637, -3.517, -4.135, -3.322, -3.336],
                'eps': [-6.733, -7.349, -5.974, -7.098, -7.106, -7.841, -7.751, -7.356, -6.303, -6.224],
                'wd': [-3.445, -3.442, -3.463, -3.419, -3.443, -3.476, -3.45, -3.465, -3.467, -3.456],
                'max_lr': [-2.867, -2.861, -2.808, -2.936, -2.826, -2.832, -2.917, -2.884, -2.843, -2.891],
                'cycle_peak': [0.43, 0.432, 0.421, 0.424, 0.423, 0.435, 0.434, 0.423, 0.428, 0.433],
            },
            'relu': {
                'beta1': [-0.977, -1.015, -0.663, -0.93, -1.152, -0.906, -1.337, -1.039, -0.745, -1.001],
                'beta2': [-2.89, -2.588, -2.864, -2.686, -2.596, -2.844, -2.949, -2.555, -3.04, -2.626],
                'eps': [-9.458, -8.826, -9.574, -9.402, -9.494, -9.727, -8.408, -8.723, -8.867, -8.718],
                'wd': [-3.488, -3.437, -3.424, -3.419, -3.376, -3.445, -3.558, -3.432, -3.406, -3.385],
                'max_lr': [-3.083, -3.25, -3.152, -3.057, -3.174, -3.267, -3.005, -3.266, -3.171, -3.203],
                'cycle_peak': [0.407, 0.427, 0.443, 0.456, 0.45, 0.44, 0.487, 0.41, 0.416, 0.481],
            },
        }
    },
    'cnn': {
        'cifar100': {
            'max': {
                'beta1': [-1.091, -1.215, -1.497, -1.07, -1.26, -1.22, -1.093, -1.069, -1.022, -1.125],
                'beta2': [-3.478, -3.472, -3.962, -3.441, -3.588, -3.594, -3.57, -3.489, -3.565, -3.472],
                'eps': [-6.659, -6.532, -6.722, -5.845, -6.062, -6.791, -6.891, -5.876, -5.797, -5.899],
                'wd': [-3.384, -3.194, -3.32, -3.375, -3.354, -3.375, -3.232, -3.244, -3.385, -3.395],
                'max_lr': [-2.628, -2.563, -2.8, -2.637, -2.67, -2.632, -2.62, -2.575, -2.594, -2.555],
                'cycle_peak': [0.438, 0.445, 0.439, 0.449, 0.45, 0.451, 0.446, 0.44, 0.433, 0.443],
            },
            'relu': {
                'beta1': [-0.525, -0.504, -0.542, -0.551, -0.421, -0.517, -0.468, -0.406, -0.426, -0.539],
                'beta2': [-3.872, -3.536, -3.188, -3.406, -3.848, -3.675, -3.324, -3.565, -3.893, -3.537],
                'eps': [-8.481, -8.706, -8.304, -9.159, -9.232, -8.727, -8.963, -8.906, -8.535, -8.286],
                'wd': [-3.56, -3.553, -3.521, -3.519, -3.399, -3.311, -3.463, -3.518, -3.413, -3.336],
                'max_lr': [-2.76, -2.731, -2.716, -2.747, -2.75, -2.741, -2.71, -2.729, -2.736, -2.785],
                'cycle_peak': [0.412, 0.402, 0.398, 0.419, 0.415, 0.428, 0.42, 0.422, 0.401, 0.405],
            },
        }
    }
}

_BOUNDS100 = {
    'mlp': {
        'cifar100': {
            'max': {
                'beta1': [-0.73, -0.632, -0.703, -0.649, -0.774, -0.677, -0.647, -0.675, -0.682, -0.738],
                'beta2': [-3.947, -3.758, -3.97, -4.009, -3.914, -3.759, -3.834, -3.822, -3.813, -3.905],
                'eps': [-5.859, -5.835, -6.743, -5.897, -5.987, -5.622, -6.306, -6.253, -6.261, -5.686],
                'wd': [-2.473, -2.616, -2.591, -2.521, -2.606, -2.508, -2.519, -2.524, -2.565, -2.624],
                'max_lr': [-3.22, -3.227, -3.225, -3.222, -3.199, -3.233, -3.226, -3.22, -3.212, -3.211],
                'cycle_peak': [0.353, 0.376, 0.357, 0.354, 0.409, 0.378, 0.391, 0.384, 0.389, 0.383],
            },
            'relu': {
                'beta1': [-0.919, -0.831, -0.738, -1.276, -1.276, -0.826, -0.786, -1.418, -1.404, -1.268],
                'beta2': [-4.083, -5.063, -4.486, -4.384, -4.384, -5.355, -3.623, -3.693, -4.078, -3.798],
                'eps': [-6.296, -6.446, -6.167, -6.151, -6.151, -6.167, -6.92, -7.338, -7.605, -6.773],
                'wd': [-2.69, -2.688, -2.811, -2.783, -2.783, -2.718, -2.665, -2.817, -2.771, -2.718],
                'max_lr': [-3.165, -3.19, -3.228, -3.149, -3.149, -3.188, -3.28, -3.195, -3.197, -3.168],
                'cycle_peak': [0.417, 0.401, 0.423, 0.434, 0.434, 0.434, 0.454, 0.393, 0.454, 0.399],
            },
        }
    },
    'cnn': {
        'cifar100': {
            'max': {
                'beta1': [-0.697, -0.685, -0.48, -0.575, -0.622, -0.662, -0.755, -0.747, -0.547, -0.593],
                'beta2': [-4.757, -4.523, -4.717, -4.64, -4.735, -4.606, -4.495, -4.616, -4.619, -4.519],
                'eps': [-6.555, -6.807, -6.281, -6.56, -6.702, -6.314, -6.576, -6.772, -6.313, -6.347],
                'wd': [-3.413, -3.506, -3.413, -3.438, -3.52, -3.523, -3.496, -3.497, -3.512, -3.405],
                'max_lr': [-2.54, -2.419, -2.629, -2.525, -2.509, -2.461, -2.516, -2.563, -2.454, -2.629],
                'cycle_peak': [0.381, 0.368, 0.395, 0.372, 0.365, 0.396, 0.375, 0.397, 0.378, 0.39],
            },
            'relu': {
                'beta1': [-0.504, -0.489, -0.361, -0.192, -0.585, -0.42, -0.256, -0.732, -0.562, -0.469],
                'beta2': [-5.047, -4.808, -4.925, -4.718, -4.543, -4.851, -5.007, -5.113, -5.167, -4.65],
                'eps': [-6.813, -7.122, -7.011, -5.8, -6.165, -6.755, -7.061, -6.667, -6.088, -6.044],
                'wd': [-3.458, -3.564, -3.33, -3.541, -3.362, -3.336, -3.285, -3.324, -3.509, -3.587],
                'max_lr': [-2.605, -2.544, -2.632, -2.608, -2.648, -2.625, -2.59, -2.641, -2.59, -2.56],
                'cycle_peak': [0.421, 0.406, 0.409, 0.397, 0.343, 0.377, 0.378, 0.351, 0.356, 0.377],
            },
        }
    }
}


def get_hparams(model, dataset, actfun, seed, epochs, search=False, hp_idx=None):

    util.seed_all(seed)
    rng = np.random.RandomState(seed)
    if epochs == 10:
        b = _BOUNDS10[model][dataset][actfun]
    elif epochs == 50:
        b = _BOUNDS50[model][dataset][actfun]
    elif epochs == 100:
        b = _BOUNDS100[model][dataset][actfun]

    if search:
        hparams = {"beta1": 1 - np.power(10., rng.uniform(b['beta1'][0], b['beta1'][1])),
                   "beta2": 1 - np.power(10., rng.uniform(b['beta2'][0], b['beta2'][1])),
                   "eps": np.power(10., rng.uniform(b['eps'][0], b['eps'][1])),
                   "wd": np.power(10., rng.uniform(b['wd'][0], b['wd'][1])),
                   "max_lr": np.power(10., rng.uniform(b['max_lr'][0], b['max_lr'][1])),
                   "cycle_peak": rng.uniform(b['cycle_peak'][0], b['cycle_peak'][1])
                   }
        if hp_idx is not None:
            hparams = {"beta1": 1 - np.power(10., b['beta1'][hp_idx]),
                       "beta2": 1 - np.power(10., b['beta2'][hp_idx]),
                       "eps": np.power(10., b['eps'][hp_idx]),
                       "wd": np.power(10., b['wd'][hp_idx]),
                       "max_lr": np.power(10., b['max_lr'][hp_idx]),
                       "cycle_peak": b['cycle_peak'][hp_idx],
                       }
    else:
        hparams = {"beta1": 1 - np.power(10., b['beta1']),
                   "beta2": 1 - np.power(10., b['beta2']),
                   "eps": np.power(10., b['eps']),
                   "wd": np.power(10., b['wd']),
                   "max_lr": np.power(10., b['max_lr']),
                   "cycle_peak": b['cycle_peak'],
                   }

    return hparams